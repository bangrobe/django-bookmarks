import requests
from django import forms
from django.core.files.base import ContentFile
from django.utils.text import slugify
from .models import Image

class ImageCreateForm(forms.ModelForm):
    class Meta:
        model = Image
        fields = ['title','url','description']
        widgets = {
            'url': forms.HiddenInput
        }

    def clean_urls(self):
        url = self.cleaned_data['url']
        valid_extensions = ['jpg','jpeg','png']

        extension = url.rsplit('.',1)[1].lower()
        if extension not in valid_extensions:
            raise forms.ValidationError('The given URL does not match valid image extensions')
        
        return url

    '''
    We have overridden the save() method, keeping the parameters required by ModelForm. The preceding 
    code can be explained as follows:
    1. A new image instance is created by calling the save() method of the form with commit=False.
    2. The URL of the image is retrieved from the cleaned_data dictionary of the form.
    3. An image name is generated by combining the image title slug with the original file extension 
    of the image.
    4. The Requests Python library is used to download the image by sending an HTTP GET request 
    using the image URL. The response is stored in the response object.
    5. The save() method of the image field is called, passing it a ContentFile object that is instatiated with the downloaded file content. 
    In this way, the file is saved to the media directory of the project. 
    The save=False parameter is passed to avoid saving the object to the database yet.
    6. To maintain the same behavior as the original save() method of the model form, the form is 
    only saved to the database if the commit parameter is True.
    '''
    
    def save(self, force_insert=False, force_update=False, commit=True):
        image = super().save(commit=False) #1
        image_url = self.cleaned_data['url'] #2
        name = slugify(image.title) #3
        extension = image_url.rsplit('.',1)[1].lower()
        image_name = f'{name}.{extension}'

        #Download image from the given url
        response = requests.get(image_url) #4
        image.image.save(image_name, ContentFile(response.content), save=False) #5

        if commit: #6, if commit is True
            image.save()
        return image